---
import type { CollectionEntry } from 'astro:content'
import FormattedDate from '../components/FormattedDate.astro'
import type { MarkdownHeading } from 'astro'
import TableOfContents from '../components/TableOfContents.astro'
import dayjs from 'dayjs'
import utc from 'dayjs/plugin/utc'

dayjs.extend(utc)

type Props = CollectionEntry<'blog'>['data'] & {
	headings: MarkdownHeading[]
	slug: string
	remarkPluginFrontmatter: Record<string, string>
	showConfigSidebar?: boolean
}

const {
	title,
	description,
	pubDate,
	updatedDate,
	headings,
	slug,
	remarkPluginFrontmatter,
	showConfigSidebar = false,
} = Astro.props

import BaseLayout from './BaseLayout.astro'
import { Icon } from 'astro-icon/components'
import ConfigTable from '../components/inference/ConfigTable.tsx'

const lastModified = dayjs(remarkPluginFrontmatter.lastModified)
	.utc()
	.format('D MMM YYYY')
---

<BaseLayout title={title} description={description}>
	<main>
		<article>
			<div
				class="app-container flex flex-col xl:flex-row gap-4 xl:gap-8 py-24 relative"
			>
				<!-- Left: Table of Contents -->
				<div class="xl:w-48 flex-shrink-0 relative hidden xl:block">
					<div class="sticky top-0 xl:top-8">
						<TableOfContents headings={headings} />
					</div>
					{showConfigSidebar && (
						<div class="sticky top-96">
							<div class="sidebar-content">
								<h3 class="sidebar-title">Configuration</h3>
								<ConfigTable compact={true} client:load />
							</div>
						</div>
					)}
				</div>

				<!-- Center: Main Content -->
				<div class="flex-1 min-w-0 max-w-[120ch]">
					<div>
						<h1
							class="text-4xl sm:text-5xl leading-snug pt-4 xl:pt-8 font-bold"
						>
							{title}
						</h1>
						<div class="text-lg flex items-center gap-4 flex-wrap py-4">
							<!-- Publish date -->
							<span>
								<Icon
									name="mdi:calendar-month-outline"
									class="inline-block text-primary dark:text-primary-dark"
								/>
								<FormattedDate date={pubDate} />
							</span>

							<!-- Updated date -->
							{
								updatedDate && (
									<span>
										<Icon
											name="mdi:calendar-refresh-outline"
											class="inline-block text-primary dark:text-primary-dark"
										/>
										Last updated on <FormattedDate date={updatedDate} />
									</span>
								)
							}

							<!-- Read time -->
							<span>
								<Icon
									name="mdi:clock-time-four-outline"
									class="inline-block text-primary dark:text-primary-dark"
								/>
								{remarkPluginFrontmatter.minutesRead}
							</span>
						</div>
					</div>
					<div
						class="prose prose-neutral prose-xl md:prose-xl dark:prose-invert prose-img:rounded-xl prose-figure:text-center prose-img:mx-auto"
					>
						<slot />
					</div>

					<!-- Suggest edit -->
					<div class="flex justify-between mt-16 gap-4 flex-wrap italic">
						<a
							href={`https://github.com/fergusfinn/blog/edit/main/src/content/blog/${slug}.mdx`}
							target="_blank"
							rel="noopener noreferrer"
							class="hover:underline underline-offset-4 opacity-70 hover:opacity-100"
							><Icon name="mdi:pencil-outline" class="inline-block" />
							Suggest an edit
						</a>
						<p class="opacity-70">
							Last modified: {lastModified}
						</p>
					</div>
				</div>

				<!-- Right: Space for sidenotes -->
				<div class="xl:w-64 flex-shrink-0 hidden xl:block"></div>
			</div>
		</article>
	</main>

	<script>
		// Tufte-style sidenotes functionality
		function initSidenotes() {
			// Handle component-based sidenotes with auto-numbering
			const sidenoteWrappers = document.querySelectorAll('.sidenote-wrapper')
			sidenoteWrappers.forEach((wrapper, index) => {
				const sidenoteId = wrapper.getAttribute('data-sidenote-id')
				const label = wrapper.querySelector('.sidenote-number')
				const sidenote = wrapper.querySelector('.sidenote')
				const sidenoteNumberCopy = wrapper.querySelector(
					'.sidenote-number-copy'
				)

				if (label && sidenoteNumberCopy && sidenoteId) {
					const number = index + 1
					label.textContent = number.toString()
					sidenoteNumberCopy.textContent = `${number}.`
					label.setAttribute('data-sidenote-id', sidenoteId)
					sidenoteNumberCopy.setAttribute('data-sidenote-id', sidenoteId)
				}

				// Add hover interaction between sidenote and its number
				if (label && sidenote) {
					sidenote.addEventListener('mouseenter', () => {
						label.classList.add('hover-active')
					})
					sidenote.addEventListener('mouseleave', () => {
						label.classList.remove('hover-active')
					})

					// Also add the reverse interaction
					label.addEventListener('mouseenter', () => {
						sidenote.classList.add('hover-active')
					})
					label.addEventListener('mouseleave', () => {
						sidenote.classList.remove('hover-active')
					})
				}
			})
		}

		// Initialize when DOM is ready
		if (document.readyState === 'loading') {
			document.addEventListener('DOMContentLoaded', initSidenotes)
		} else {
			initSidenotes()
		}
	</script>

	<style>
		.sidebar-content {
			background: white;
			border: 1px solid #e5e7eb;
			border-radius: 0.5rem;
			padding: 1rem;
			box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
			margin-left: -1rem;
			width: calc(100% + 1rem);
		}

		:global(.dark) .sidebar-content {
			background: #1f2937;
			border-color: #374151;
		}

		.sidebar-title {
			font-size: 1rem;
			font-weight: 600;
			margin: 0 0 1rem 0;
			padding-bottom: 0.5rem;
			border-bottom: 1px solid #e5e7eb;
		}

		:global(.dark) .sidebar-title {
			border-color: #374151;
		}
	</style>
</BaseLayout>
